{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodosFIlter/TodosFilter.jsx","App.js","index.js"],"names":["TodoItem","id","title","completed","changeStatus","className","classNames","view","type","checked","onChange","TodoList","todos","map","todo","key","defaultProps","TodosFilter","uncomplitedTodos","length","href","App","useState","setTodos","todoTitle","setTodoTitle","notCompletedTodos","setNotCompletedTodos","useEffect","getNotCompletedTodos","allTodos","filter","onSubmit","event","preventDefault","value","placeholder","target","onKeyDown","Date","every","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5176498.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ id, title, completed, changeStatus }) => (\n  <li\n    className={classNames({\n      view: !completed,\n      completed,\n    })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        checked={completed}\n        className=\"toggle\"\n        onChange={() => {\n          changeStatus(id);\n        }}\n      />\n      <label>{title}</label>\n      <button type=\"button\" className=\"destroy\" />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({ todos, changeStatus }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        {...todo}\n        changeStatus={changeStatus}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n  changeStatus: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ uncomplitedTodos }) => (\n  <>\n    <span className=\"todo-count\">\n      {`${uncomplitedTodos.length}\n        ${uncomplitedTodos.length !== 1 ? 'items' : 'item'} left`\n      }\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a href=\"#/\" className=\"selected\">All</a>\n      </li>\n\n      <li>\n        <a href=\"#/active\">Active</a>\n      </li>\n\n      <li>\n        <a href=\"#/completed\">Completed</a>\n      </li>\n    </ul>\n\n    <button type=\"button\" className=\"clear-completed\">\n      Clear completed\n    </button>\n  </>\n);\n\nTodosFilter.propTypes = {\n  uncomplitedTodos: PropTypes.arrayOf(PropTypes.object),\n};\n\nTodosFilter.defaultProps = {\n  uncomplitedTodos: [],\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFIlter';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [notCompletedTodos, setNotCompletedTodos] = useState([]);\n\n  useEffect(() => {\n    getNotCompletedTodos(todos);\n  }, [todos]);\n\n  const createTodo = (title) => {\n    setTodos([\n      ...todos,\n      {\n        title,\n        id: +new Date(),\n        completed: false,\n      },\n    ]);\n  };\n\n  const getNotCompletedTodos = (allTodos) => {\n    setNotCompletedTodos(\n      allTodos.filter(todo => todo.completed === false),\n    );\n  };\n\n  const changeTodoStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const toggleAll = () => {\n    if (todos.every(todo => todo.completed)) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            value={todoTitle}\n            placeholder=\"What needs to be done?\"\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n            }}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' && todoTitle) {\n                createTodo(todoTitle);\n                setTodoTitle('');\n              }\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          checked={todos.length > 0 && todos.every(todo => todo.completed)}\n          className=\"toggle-all\"\n          onChange={() => {\n            toggleAll();\n          }}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={todos}\n          changeStatus={changeTodoStatus}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <TodosFilter\n            todos={todos}\n            uncomplitedTodos={notCompletedTodos}\n          />\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}