{"version":3,"sources":["constants.js","redux/store.js","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodosFIlter/TodosFilter.jsx","App.js","redux/todos.js","index.js"],"names":["FILTERS","initialState","todos","visibleTodos","title","newTitle","store","createStore","state","action","type","id","Date","completed","editing","filter","todo","filterType","map","status","TodoItem","useSelector","dispatch","useDispatch","changeTitleFunc","todoId","value","changeTitle","setEditingFunc","setEditing","deleteTodoFunc","deleteTodo","className","classNames","view","checked","onChange","changeTodoStatus","changeTodoStatusFunc","onDoubleClick","onClick","autoFocus","event","setNewTitle","setNewTitleFunc","target","onBlur","trim","onKeyDown","key","TodoList","defaultProps","TodosFilter","activeTodos","clearCompleted","completedTodos","filterTodos","length","href","selected","App","todoTitle","filteredTodos","areAllCompleted","useMemo","every","setTitleFunc","setTitle","onSubmit","preventDefault","placeholder","addTodo","createTodo","toggleAll","toggleAllFunc","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"qUAAaA,EACN,MADMA,EAEA,YAFAA,EAGH,SCAJC,EAAe,CACnBC,MAAO,GACPC,aAAcH,EACdI,MAAO,GACPC,SAAU,IA0IGC,EAFDC,aA/GE,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAxBoB,WAyBlB,OAAO,2BACFF,GADL,IAEEN,MAAM,GAAD,mBACAM,EAAMN,OADN,CAEH,CACEE,MAAOK,EAAOL,MACdO,IAAK,IAAIC,KACTC,WAAW,EACXC,SAAS,OAKjB,IArCuB,cAsCrB,OAAO,2BACFN,GADL,IAEEN,MAAOM,EAAMN,MAAMa,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOF,EAAOE,QAGzD,IA1CwB,eA2CtB,OAAO,2BACFH,GADL,IAEEL,aAAcM,EAAOQ,aAGzB,IA/C8B,qBAgD5B,OAAO,2BACFT,GADL,IAEEN,MAAOM,EAAMN,MAAMgB,KAAI,SAACF,GACtB,OAAIA,EAAKL,KAAOF,EAAOE,GACd,2BACFK,GADL,IAEEH,WAAYG,EAAKH,YAIdG,OAIb,IA7DsB,aA8DpB,OAAO,2BACFR,GADL,IAEEN,MAAOO,EAAOU,OACTX,EAAMN,MAAMgB,KAAI,SAAAF,GAAI,kCAClBA,GADkB,IAErBH,UAAWJ,EAAOU,YAEjBX,EAAMN,MAAMgB,KAAI,SAAAF,GAAI,kCAClBA,GADkB,IAErBH,WAAYJ,EAAOU,cAI3B,IA1E2B,kBA2EzB,OAAO,2BACFX,GADL,IAEEN,MAAOM,EAAMN,MAAMa,QAAO,SAAAC,GAAI,OAAKA,EAAKH,eAG5C,IA/EwB,eAgFtB,OAAO,2BACFL,GADL,IAEEH,SAAUI,EAAOL,MACjBF,MAAOM,EAAMN,MAAMgB,KAAI,SAACF,GACtB,OAAIA,EAAKL,KAAOF,EAAOE,GACd,2BACFK,GADL,IAEEZ,MAAOK,EAAOL,QAIXY,OAIb,IA9FqB,YA+FnB,OAAO,2BACFR,GADL,IAEEJ,MAAOK,EAAOL,QAGlB,IAnGuB,iBAoGrB,OAAO,2BACFI,GADL,IAEEN,MAAOM,EAAMN,MAAMgB,KAAI,SAACF,GACtB,OAAIA,EAAKL,KAAOF,EAAOE,GACd,2BACFK,GADL,IAEEF,QAASL,EAAOK,UAIbE,OAIb,IAjHyB,gBAkHvB,OAAO,2BACFR,GADL,IAEEH,SAAUI,EAAOL,QAGrB,QACE,OAAOI,MC9HAY,EAAW,SAAC,GAAuC,IAArCT,EAAoC,EAApCA,GAAIP,EAAgC,EAAhCA,MAAOS,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACzCT,EAAWgB,aAAY,SAAAb,GAAK,OAAIA,EAAMH,YACtCiB,EAAWC,cAEXC,EAAkB,SAACC,EAAQC,GAC/B,IAAMjB,EDSiB,SAACE,EAAIP,GAAL,MAAgB,CAAEM,KAXjB,eAWqCC,KAAIP,SCTlDuB,CAAYF,EAAQC,GAEnCJ,EAASb,IASLmB,EAAiB,SAACT,EAAQM,GAC9B,IAAMhB,EDDgB,SAACK,EAASH,GAAV,MAAkB,CAAED,KAXnB,iBAWsCI,UAASH,MCCvDkB,CAAWV,EAAQM,GAElCH,EAASb,IAGLqB,EAAiB,SAACL,GACtB,IAAMhB,EDdgB,SAAAE,GAAE,MAAK,CAAED,KAXR,cAW2BC,MCcnCoB,CAAWN,GAE1BH,EAASb,IASX,OACE,wBACEuB,UAAWC,IAAW,CACpBC,MAAOrB,EACPA,YACAC,aAGF,yBAAKkB,UAAU,QACb,2BACEtB,KAAK,WACLyB,QAAStB,EACTmB,UAAU,SACVI,SAAU,YAnBW,SAACX,GAC5B,IAAMhB,EDlBsB,SAAAE,GAAE,MAAK,CAAED,KAXP,qBAWiCC,MCkBhD0B,CAAiBZ,GAEhCH,EAASb,GAiBD6B,CAAqB3B,MAGzB,2BACE4B,cAAe,WACbX,GAAe,EAAMjB,KAGtBP,GAEH,4BACEM,KAAK,SACLsB,UAAU,UACVQ,QAAS,WACPV,EAAenB,OAIpBG,GACC,2BACE2B,WAAS,EACT/B,KAAK,OACLsB,UAAU,OACVN,MAAOrB,EACP+B,SAAU,SAACM,IA9DK,SAACjB,EAAQC,GAC/B,IAAMjB,EDMiB,SAAAL,GAAK,MAAK,CAAEM,KAXV,gBAW+BN,SCNzCuC,CAAYlB,GAE3BH,EAASb,GA4DDmC,CAAgBF,EAAMG,OAAOnB,QAE/BoB,OAAQ,WACFzC,EAAS0C,OACXvB,EAAgBb,EAAIN,GAEpByB,EAAenB,GAGjBiB,GAAe,EAAOjB,IAExBqC,UAAW,SAACN,GACQ,UAAdA,EAAMO,KAAmB5C,EAAS0C,SACpCvB,EAAgBb,EAAIN,GACpBuB,GAAe,EAAOjB,IAGN,UAAd+B,EAAMO,KAAuC,KAApB5C,EAAS0C,QACpCjB,EAAenB,GAGC,WAAd+B,EAAMO,MACRzB,EAAgBpB,GAChBwB,GAAe,EAAOjB,SCzGvBuC,EAAW,SAAC,GAAD,IAAGhD,EAAH,EAAGA,MAAH,OACtB,wBAAI8B,UAAU,aACX9B,EAAMgB,KAAI,SAAAF,GAAI,OACb,kBAAC,EAAD,eACEiC,IAAKjC,EAAKL,IACNK,SAgBZkC,EAASC,aAAe,CACtBjD,MAAO,ICpBF,IAAMkD,EAAc,SAAC,GAAD,IACzBC,EADyB,EACzBA,YACAC,EAFyB,EAEzBA,eACAC,EAHyB,EAGzBA,eACApD,EAJyB,EAIzBA,aACAqD,EALyB,EAKzBA,YALyB,OAOzB,oCACE,0BAAMxB,UAAU,cAAhB,UACMqB,EAAYI,OADlB,qBAE6B,IAAvBJ,EAAYI,OAAe,QAAU,OAF3C,UAMA,wBAAIzB,UAAU,WACZ,4BACE,uBACE0B,KAAK,KACL1B,UAAWC,IAAW,CACpB0B,SAAUxD,IAAiBH,IAE7BwC,QAAS,kBAAMgB,EAAYxD,KAL7B,QAWF,4BACE,uBACE0D,KAAK,WACL1B,UAAWC,IAAW,CACpB0B,SAAUxD,IAAiBH,IAE7BwC,QAAS,kBAAMgB,EAAYxD,KAL7B,WAWF,4BACE,uBACE0D,KAAK,cACL1B,UAAWC,IAAW,CACpB0B,SAAUxD,IAAiBH,IAE7BwC,QAAS,kBAAMgB,EAAYxD,KAL7B,eAYHuD,EAAeE,OAAS,GACvB,4BACE/C,KAAK,SACLsB,UAAU,kBACVQ,QAASc,GAHX,qBAmBNF,EAAYD,aAAe,CACzBE,YAAa,GACbE,eAAgB,ICqDHK,MAvHf,WACE,IAAM1D,EAAQmB,aAAY,SAAAb,GAAK,OAAIA,EAAMN,SACnCC,EAAekB,aAAY,SAAAb,GAAK,OAAIA,EAAML,gBAC1C0D,EAAYxC,aAAY,SAAAb,GAAK,OAAIA,EAAMJ,SACvCkB,EAAWC,cAQXuC,EAAgB5D,EAAMa,QAAO,SAACC,GAClC,OAAQb,GACN,KAAKH,EACH,OAAOgB,EAAKH,UAEd,KAAKb,EACH,OAAQgB,EAAKH,UAEf,QACE,OAAOG,MAUP+C,EAAkBC,mBACtB,kBAAM9D,EAAM+D,OAAM,SAAAjD,GAAI,OAAIA,EAAKH,eAAY,CAACX,IASxCmD,EAAcW,mBAClB,kBAAM9D,EAAMa,QAAO,SAAAC,GAAI,OAAKA,EAAKH,eAAY,CAACX,IAG1CqD,EAAiBS,mBACrB,kBAAM9D,EAAMa,QAAO,SAAAC,GAAI,OAAIA,EAAKH,eAAY,CAACX,IASzCgE,EAAe,SAAC9D,GACpB,IAAMK,ECxDc,SAAAL,GAAK,MAAK,CAAEM,KARX,YAQ4BN,SDwDlC+D,CAAS/D,GAExBkB,EAASb,IAGX,OACE,6BAASuB,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,0BACEoC,SAAU,SAAC1B,GACTA,EAAM2B,mBAGR,2BACE3D,KAAK,OACLsB,UAAU,WACVN,MAAOmC,EACPS,YAAY,yBACZlC,SAAU,SAACM,GACTwB,EAAaxB,EAAMG,OAAOnB,QAE5BsB,UAAW,SAACN,GACQ,UAAdA,EAAMO,KAAmBY,EAAUd,UA1EhC,SAAC3C,GAClB,IAAMK,ECba,SAAAL,GAAK,MAAK,CAAEM,KARX,WAQ2BN,SDahCmE,CAAQnE,GAEvBkB,EAASb,GAwEG+D,CAAWX,EAAUd,QACrBmB,EAAa,UAOvB,6BAASlC,UAAU,QACjB,2BACEtB,KAAK,WACLC,GAAG,aACHwB,QAASjC,EAAMuD,OAAS,GAAKM,EAC7B/B,UAAU,aACVI,SAAU,YA5DI,SAACjB,GACrB,IAAMV,ECtCe,SAAAU,GAAM,MAAK,CAAET,KARZ,aAQ8BS,UDsCrCsD,CAAUtD,GAEzBG,EAASb,GA0DDiE,CAAcX,MAGlB,2BAAOY,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CAAUzE,MAAO4D,KAGlB5D,EAAMuD,OAAS,GACd,4BAAQzB,UAAU,UAChB,kBAAC,EAAD,CACEwB,YAlFc,SAACzC,GACvB,IAAMN,EC9BgC,CAAEC,KARhB,eAQoCO,WD8BjCF,GAE3BO,EAASb,IAgFD4C,YAAaA,EACbE,eAAgBA,EAChBD,eA7DiB,WACzB,ICnD0BnC,EDqD1BG,ECrDqC,CAAEZ,KARZ,kBAQmCS,YDgHtDhB,aAAcA,OElH1ByE,IAASC,OACP,kBAAC,IAAD,CAAUvE,MAAOA,GACf,kBAAC,EAAD,OAEFwE,SAASC,eAAe,W","file":"static/js/main.cee0c785.chunk.js","sourcesContent":["export const FILTERS = {\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n};\n","import { createStore } from 'redux';\nimport { FILTERS } from '../constants';\n\nconst initialState = {\n  todos: [],\n  visibleTodos: FILTERS.all,\n  title: '',\n  newTitle: '',\n};\n\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const FILTER_TODOS = 'FILTER_TODOS';\nexport const CHANGE_TODO_STATUS = 'CHANGE_TODO_STATUS';\nexport const TOGGLE_ALL = 'TOGGLE_ALL';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\nexport const CHANGE_TITLE = 'CHANGE_TITLE';\nexport const SET_TITLE = 'SET_TITLE';\nexport const SET_EDITING = 'CHANGE_EDITING';\nexport const SET_NEW_TITLE = 'SET_NEW_TITLE';\n\nexport const addTodo = title => ({ type: ADD_TODO, title });\nexport const deleteTodo = id => ({ type: DELETE_TODO, id });\nexport const filterTodos = filterType => ({ type: FILTER_TODOS, filterType });\nexport const changeTodoStatus = id => ({ type: CHANGE_TODO_STATUS, id });\nexport const toggleAll = status => ({ type: TOGGLE_ALL, status });\nexport const clearCompleted = status => ({ type: CLEAR_COMPLETED, status });\nexport const changeTitle = (id, title) => ({ type: CHANGE_TITLE, id, title });\nexport const setTitle = title => ({ type: SET_TITLE, title });\nexport const setEditing = (editing, id) => ({ type: SET_EDITING, editing, id });\nexport const setNewTitle = title => ({ type: SET_NEW_TITLE, title });\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            title: action.title,\n            id: +new Date(),\n            completed: false,\n            editing: false,\n          },\n        ],\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    case FILTER_TODOS:\n      return {\n        ...state,\n        visibleTodos: action.filterType,\n      };\n\n    case CHANGE_TODO_STATUS:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.id) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            };\n          }\n\n          return todo;\n        }),\n      };\n\n    case TOGGLE_ALL:\n      return {\n        ...state,\n        todos: action.status\n          ? (state.todos.map(todo => ({\n            ...todo,\n            completed: action.status,\n          })))\n          : (state.todos.map(todo => ({\n            ...todo,\n            completed: !action.status,\n          }))),\n      };\n\n    case CLEAR_COMPLETED:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed),\n      };\n\n    case CHANGE_TITLE:\n      return {\n        ...state,\n        newTitle: action.title,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.id) {\n            return {\n              ...todo,\n              title: action.title,\n            };\n          }\n\n          return todo;\n        }),\n      };\n\n    case SET_TITLE:\n      return {\n        ...state,\n        title: action.title,\n      };\n\n    case SET_EDITING:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.id) {\n            return {\n              ...todo,\n              editing: action.editing,\n            };\n          }\n\n          return todo;\n        }),\n      };\n\n    case SET_NEW_TITLE:\n      return {\n        ...state,\n        newTitle: action.title,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  setEditing,\n  setNewTitle,\n  changeTitle,\n  deleteTodo,\n  changeTodoStatus,\n} from '../../redux/store';\n\nexport const TodoItem = ({ id, title, completed, editing }) => {\n  const newTitle = useSelector(state => state.newTitle);\n  const dispatch = useDispatch();\n\n  const changeTitleFunc = (todoId, value) => {\n    const action = changeTitle(todoId, value);\n\n    dispatch(action);\n  };\n\n  const setNewTitleFunc = (todoId, value) => {\n    const action = setNewTitle(todoId, value);\n\n    dispatch(action);\n  };\n\n  const setEditingFunc = (status, todoId) => {\n    const action = setEditing(status, todoId);\n\n    dispatch(action);\n  };\n\n  const deleteTodoFunc = (todoId) => {\n    const action = deleteTodo(todoId);\n\n    dispatch(action);\n  };\n\n  const changeTodoStatusFunc = (todoId) => {\n    const action = changeTodoStatus(todoId);\n\n    dispatch(action);\n  };\n\n  return (\n    <li\n      className={classNames({\n        view: !completed,\n        completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          className=\"toggle\"\n          onChange={() => {\n            changeTodoStatusFunc(id);\n          }}\n        />\n        <label\n          onDoubleClick={() => {\n            setEditingFunc(true, id);\n          }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            deleteTodoFunc(id);\n          }}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          value={newTitle}\n          onChange={(event) => {\n            setNewTitleFunc(event.target.value);\n          }}\n          onBlur={() => {\n            if (newTitle.trim()) {\n              changeTitleFunc(id, newTitle);\n            } else {\n              deleteTodoFunc(id);\n            }\n\n            setEditingFunc(false, id);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter' && newTitle.trim()) {\n              changeTitleFunc(id, newTitle);\n              setEditingFunc(false, id);\n            }\n\n            if (event.key === 'Enter' && newTitle.trim() === '') {\n              deleteTodoFunc(id);\n            }\n\n            if (event.key === 'Escape') {\n              changeTitleFunc(title);\n              setEditingFunc(false, id);\n            }\n          }}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  editing: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        {...todo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { FILTERS } from '../../constants';\n\nexport const TodosFilter = ({\n  activeTodos,\n  clearCompleted,\n  completedTodos,\n  visibleTodos,\n  filterTodos,\n}) => (\n  <>\n    <span className=\"todo-count\">\n      {`${activeTodos.length}\n        ${activeTodos.length !== 1 ? 'items' : 'item'} left`\n      }\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({\n            selected: visibleTodos === FILTERS.all,\n          })}\n          onClick={() => filterTodos(FILTERS.all)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({\n            selected: visibleTodos === FILTERS.active,\n          })}\n          onClick={() => filterTodos(FILTERS.active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({\n            selected: visibleTodos === FILTERS.completed,\n          })}\n          onClick={() => filterTodos(FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    {completedTodos.length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nTodosFilter.propTypes = {\n  activeTodos: PropTypes.arrayOf(PropTypes.object),\n  clearCompleted: PropTypes.func.isRequired,\n  completedTodos: PropTypes.arrayOf(PropTypes.object),\n  visibleTodos: PropTypes.string.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n};\n\nTodosFilter.defaultProps = {\n  activeTodos: [],\n  completedTodos: [],\n};\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFIlter';\n\nimport { FILTERS } from './constants';\nimport {\n  addTodo,\n  filterTodos,\n  toggleAll,\n  clearCompleted,\n  setTitle,\n} from './redux/todos';\n\nfunction App() {\n  const todos = useSelector(state => state.todos);\n  const visibleTodos = useSelector(state => state.visibleTodos);\n  const todoTitle = useSelector(state => state.title);\n  const dispatch = useDispatch();\n\n  const createTodo = (title) => {\n    const action = addTodo(title);\n\n    dispatch(action);\n  };\n\n  const filteredTodos = todos.filter((todo) => {\n    switch (visibleTodos) {\n      case FILTERS.completed:\n        return todo.completed;\n\n      case FILTERS.active:\n        return !todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  const filterTodosFunc = (filter) => {\n    const action = filterTodos(filter);\n\n    dispatch(action);\n  };\n\n  const areAllCompleted = useMemo(\n    () => todos.every(todo => todo.completed), [todos],\n  );\n\n  const toggleAllFunc = (status) => {\n    const action = toggleAll(status);\n\n    dispatch(action);\n  };\n\n  const activeTodos = useMemo(\n    () => todos.filter(todo => !todo.completed), [todos],\n  );\n\n  const completedTodos = useMemo(\n    () => todos.filter(todo => todo.completed), [todos],\n  );\n\n  const clearCompletedFunc = () => {\n    const action = clearCompleted();\n\n    dispatch(action);\n  };\n\n  const setTitleFunc = (title) => {\n    const action = setTitle(title);\n\n    dispatch(action);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            value={todoTitle}\n            placeholder=\"What needs to be done?\"\n            onChange={(event) => {\n              setTitleFunc(event.target.value);\n            }}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' && todoTitle.trim()) {\n                createTodo(todoTitle.trim());\n                setTitleFunc('');\n              }\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          checked={todos.length > 0 && areAllCompleted}\n          className=\"toggle-all\"\n          onChange={() => {\n            toggleAllFunc(areAllCompleted);\n          }}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList todos={filteredTodos} />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <TodosFilter\n            filterTodos={filterTodosFunc}\n            activeTodos={activeTodos}\n            completedTodos={completedTodos}\n            clearCompleted={clearCompletedFunc}\n            visibleTodos={visibleTodos}\n          />\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const FILTER_TODOS = 'FILTER_TODOS';\nexport const CHANGE_TODO_STATUS = 'CHANGE_TODO_STATUS';\nexport const TOGGLE_ALL = 'TOGGLE_ALL';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\nexport const SET_TITLE = 'SET_TITLE';\n\nexport const addTodo = title => ({ type: ADD_TODO, title });\nexport const deleteTodo = id => ({ type: DELETE_TODO, id });\nexport const filterTodos = filterType => ({ type: FILTER_TODOS, filterType });\nexport const changeTodoStatus = id => ({ type: CHANGE_TODO_STATUS, id });\nexport const toggleAll = status => ({ type: TOGGLE_ALL, status });\nexport const clearCompleted = status => ({ type: CLEAR_COMPLETED, status });\nexport const setTitle = title => ({ type: SET_TITLE, title });\n\nexport const todosReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            title: action.title,\n            id: +new Date(),\n            completed: false,\n            editing: false,\n          },\n        ],\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    case FILTER_TODOS:\n      return {\n        ...state,\n        visibleTodos: action.filterType,\n      };\n\n    case CHANGE_TODO_STATUS:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.id) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            };\n          }\n\n          return todo;\n        }),\n      };\n\n    case TOGGLE_ALL:\n      return {\n        ...state,\n        todos: action.status\n          ? (state.todos.map(todo => ({\n            ...todo,\n            completed: action.status,\n          })))\n          : (state.todos.map(todo => ({\n            ...todo,\n            completed: !action.status,\n          }))),\n      };\n\n    case CLEAR_COMPLETED:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed),\n      };\n\n    case SET_TITLE:\n      return {\n        ...state,\n        title: action.title,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}