{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","constants.js","components/TodosFIlter/TodosFilter.jsx","App.js","index.js"],"names":["TodoItem","id","title","completed","changeStatus","deleteTodo","changeTitle","useState","newTitle","setNewTitle","editing","setEditing","className","classNames","view","type","checked","onChange","onDoubleClick","onClick","autoFocus","event","target","value","onKeyDown","key","trim","TodoList","todos","map","todo","defaultProps","FILTERS","TodosFilter","activeTodos","clearCompleted","completedTodos","visibleTodos","setVisibleTodos","length","href","selected","App","setTodos","todoTitle","setTodoTitle","useEffect","localStorage","setItem","JSON","stringify","filteredTodos","filter","areAllCompleted","every","useMemo","onSubmit","preventDefault","placeholder","Date","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a20f4fd8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  id,\n  title,\n  completed,\n  changeStatus,\n  deleteTodo,\n  changeTitle,\n}) => {\n  const [newTitle, setNewTitle] = useState(title);\n  const [editing, setEditing] = useState(false);\n\n  return (\n    <li\n      className={classNames({\n        view: !completed,\n        completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          className=\"toggle\"\n          onChange={() => {\n            changeStatus(id);\n          }}\n        />\n        <label\n          onDoubleClick={() => {\n            setEditing(true);\n          }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            deleteTodo(id);\n          }}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          onChange={(event) => {\n            setNewTitle(event.target.value);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter' && newTitle.trim()) {\n              changeTitle(id, newTitle);\n\n              setNewTitle('');\n              setEditing(false);\n            }\n\n            if (event.key === 'Enter' && newTitle.trim() === '') {\n              deleteTodo(id);\n            }\n\n            if (event.key === 'Escape') {\n              setNewTitle('');\n              setEditing(false);\n            }\n          }}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeStatus,\n  deleteTodo,\n  changeTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        {...todo}\n        deleteTodo={deleteTodo}\n        changeTitle={changeTitle}\n        changeStatus={changeStatus}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","export const FILTERS = {\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { FILTERS } from '../../constants';\n\nexport const TodosFilter = ({\n  activeTodos,\n  clearCompleted,\n  completedTodos,\n  visibleTodos,\n  setVisibleTodos,\n}) => (\n  <>\n    <span className=\"todo-count\">\n      {`${activeTodos.length}\n        ${activeTodos.length !== 1 ? 'items' : 'item'} left`\n      }\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({\n            selected: visibleTodos === 'all',\n          })}\n          onClick={() => setVisibleTodos(FILTERS.all)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({\n            selected: visibleTodos === 'active',\n          })}\n          onClick={() => setVisibleTodos(FILTERS.active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({\n            selected: visibleTodos === 'completed',\n          })}\n          onClick={() => setVisibleTodos(FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    {completedTodos.length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nTodosFilter.propTypes = {\n  activeTodos: PropTypes.arrayOf(PropTypes.object),\n  clearCompleted: PropTypes.func.isRequired,\n  completedTodos: PropTypes.arrayOf(PropTypes.object),\n  visibleTodos: PropTypes.string.isRequired,\n  setVisibleTodos: PropTypes.func.isRequired,\n};\n\nTodosFilter.defaultProps = {\n  activeTodos: [],\n  completedTodos: [],\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFIlter';\n\nimport { FILTERS } from './constants';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [visibleTodos, setVisibleTodos] = useState(FILTERS.all);\n  const [todoTitle, setTodoTitle] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const createTodo = (title) => {\n    setTodos([\n      ...todos,\n      {\n        title,\n        id: +new Date(),\n        completed: false,\n        editing: false,\n      },\n    ]);\n  };\n\n  const filteredTodos = todos.filter((todo) => {\n    switch (visibleTodos) {\n      case FILTERS.completed:\n        return todo.completed;\n\n      case FILTERS.active:\n        return !todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  const changeTodoStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const areAllCompleted = todos.every(todo => todo.completed);\n\n  const toggleAll = () => {\n    if (areAllCompleted) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n  };\n\n  const activeTodos = useMemo(\n    () => todos.filter(todo => !todo.completed), [todos],\n  );\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const completedTodos = useMemo(\n    () => todos.filter(todo => todo.completed), [todos],\n  );\n\n  const clearCompleted = () => {\n    setTodos(activeTodos);\n  };\n\n  const changeTitle = (todoId, newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            value={todoTitle}\n            placeholder=\"What needs to be done?\"\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n            }}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' && todoTitle.trim()) {\n                createTodo(todoTitle.trim());\n                setTodoTitle('');\n              }\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          checked={todos.length > 0 && areAllCompleted}\n          className=\"toggle-all\"\n          onChange={toggleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={filteredTodos}\n          changeStatus={changeTodoStatus}\n          deleteTodo={deleteTodo}\n          changeTitle={changeTitle}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <TodosFilter\n            activeTodos={activeTodos}\n            completedTodos={completedTodos}\n            clearCompleted={clearCompleted}\n            visibleTodos={visibleTodos}\n            setVisibleTodos={setVisibleTodos}\n          />\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}